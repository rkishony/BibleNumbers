import pytest

from programmatic import hebrew_num_to_int, extract_number_phrases


@pytest.mark.parametrize("hebrew, expected", [
    ("שש מאות אלף ושלושת אלפים וחמש מאות וחמישים", 603550),
    ("ארבעים שנה ושמונה מאות שנה", 840),
    ("שלוש מאות", 300),
    ("שבע ומאתיים", 207),
    ("שבע ומאה", 107),
    ("מאת שנה ושלושים שנה ושבע", 137),
    ("שלושים ומאת", 130),
    ("שבע וארבעים ומאת", 147),
    ("ארבעה עשר", 14),
    ("אלף ושבע מאות וחמישה ושבעים", 1775),
    ("שבע ושלושים ומאת שנה", 137),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות", 186400),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות ושלוש", 186403),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות ושלושים וחמש", 186435),
    ("אלף אלפים", 1000000),
    ("שמונת אלפים", 8000),
    ("ריבוא ושמונת אלפים", 18000),
    ("שתים עשרה שנה ותשע מאות שנה", 912),
])
def test_hebrew_num_to_int(hebrew, expected):
    assert hebrew_num_to_int(hebrew) == expected


@pytest.mark.parametrize(
    "verse,expected",
    [
        (
            "ומן הדני עורכי מלחמה עשרים ושמונה אלף ושש מאות",
            ["עשרים ושמונה אלף ושש מאות"]
        ),
        (
            "שישה נולד לו בחברון וימלוך שם שבע שנים ושישה חודשים ושלושים ושלוש שנה מלך בירושלים",
            ["שישה", "שבע שנים ושישה חודשים ושלושים ושלוש שנה"]
        ),
        (
            "ויהיו כל ימי שת שתים עשרה שנה ותשע מאות שנה וימות",
            ["שתים עשרה שנה ותשע מאות שנה"]
        ),
        # A verse with no numbers
        (
            "והארץ היתה תהו ובהו וחשך על פני תהום",
            []
        ),
        # A verse with multiple separate number phrases
        (
            "חמש עשרה שנה ועשרים וארבעה אלף ושש מאות איש",
            ["חמש עשרה שנה", "ועשרים וארבעה אלף ושש מאות"]
        ),
    ]
)
def test_extract_number_phrases(verse, expected):
    result = extract_number_phrases(verse)
    assert result == expected
