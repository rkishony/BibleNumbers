import pytest

from programmatic_nikud import hebrew_num_to_int, extract_number_phrases


@pytest.mark.parametrize("hebrew, expected", [
    ("שנים עשר", 12),
    ("משבע שני", 7),
    ("לשבע שני", 7),
    ("בשבע שני", 7),
    ("שתים עשרה", 12),
    ("לשני עשר", 12),
    ("שש מאות אלף ושלושת אלפים וחמש מאות וחמישים", 603550),
    ("ארבעים שנה ושמונה מאות שנה", 840),
    ("שלוש מאות", 300),
    ("שבע ומאתיים", 207),
    ("שבע ומאה", 107),
    ("מאת שנה ושלושים שנה ושבע", 137),
    ("שלושים ומאת", 130),
    ("שבע וארבעים ומאת", 147),
    ("ארבעה עשר", 14),
    ("אלף ושבע מאות וחמישה ושבעים", 1775),
    ("שבע ושלושים ומאת שנה", 137),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות", 186400),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות ושלוש", 186403),
    ("מאת אלף ושמונים אלף וששת אלפים וארבע מאות ושלושים וחמש", 186435),
    ("אלף אלפים", 1000000),
    ("שמונת אלפים", 8000),
    ("ריבוא ושמונת אלפים", 18000),
    ("שתים עשרה שנה ותשע מאות שנה", 912),
])
def test_hebrew_num_to_int(hebrew, expected):
    assert hebrew_num_to_int(hebrew) == expected


@pytest.mark.parametrize(
    "verse,expected",
    [
        # (
        #         "כִּי שִׁבְעָתַיִם, יֻקַּם-קָיִן; וְלֶמֶךְ, שִׁבְעִים וְשִׁבְעָה",
        #         ["שִׁבְעִים וְשִׁבְעָה"]
        # ),
        (
                "וַיִּהְיוּ, כָּל-יְמֵי-שֵׁת, שְׁתֵּים עֶשְׂרֵה שָׁנָה, וּתְשַׁע מֵאוֹת שָׁנָה; וַיָּמֹת.",
                ["שְׁתֵּים עֶשְׂרֵה", "וּתְשַׁע מֵאוֹת"]
        ),
        (
                "",
                []
        ),

    ]
)
def test_extract_number_phrases(verse, expected):
    result = extract_number_phrases(verse)
    assert result == expected
